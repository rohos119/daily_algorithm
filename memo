import asyncio

async def udp_server():
    # Create a UDP socket
    transport, protocol = await asyncio.get_running_loop().create_datagram_endpoint(
        lambda: asyncio.Protocol(), local_addr=('0.0.0.0', 0))
    
    # Print the bound address
    print(f"Server listening on {transport.get_extra_info('sockname')}")
    
    # Wait for incoming messages
    while True:
        data, addr = await transport.recvfrom(1024)
        print(f"Received {data.decode()} from {addr}")

async def udp_client(ip, port):
    # Create a UDP socket
    transport, protocol = await asyncio.get_running_loop().create_datagram_endpoint(
        lambda: asyncio.Protocol(), remote_addr=(ip, port))
    
    # Send a message
    message = f"Hello from {ip}:{port}"
    transport.sendto(message.encode())
    print(f"Sent {message} to {ip}:{port}")
    
    # Close the socket
    transport.close()

async def main():
    server_task = asyncio.create_task(udp_server())
    client_tasks = []
    ips = ['192.168.0.10', '192.168.0.11', '192.168.0.12', '192.168.0.13', '192.168.0.14']
    ports = [5014, 5015, 5016, 5017, 5018]
    
    # Create tasks for each UDP client
    for ip, port in zip(ips, ports):
        client_tasks.append(asyncio.create_task(udp_client(ip, port)))
        
    # Wait for all tasks to complete
    await asyncio.gather(*client_tasks)
    server_task.cancel()

# Run the test code
asyncio.run(main())

from PyQt5.QtWidgets import QApplication, QFrame, QGridLayout
from PyQt5.QtCore import QTimer, Qt

class GridBorder(QFrame):
    def __init__(self):
        super().__init__()
        self.setStyleSheet('border: 1px solid rgb(255,255,255);')
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.rotate_color)
        self.timer.start(100)  # Change color every 100 ms
        
    def rotate_color(self):
        color = self.palette().color(QFrame.Background)
        r, g, b = color.red(), color.green(), color.blue()
        if r == 0 and g == 0 and b == 0:
            self.timer.stop()
        else:
            self.setStyleSheet(f'border: 1px solid rgb({255-r},{255-g},{255-b});')

app = QApplication([])
grid = QGridLayout()
border = GridBorder()
grid.addWidget(border, 0, 0)
app.setStyle('Fusion')
app.exec_()



